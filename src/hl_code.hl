fn fib(n) {
    if (n <= 2) {
        return 1;
    }

    let prev = n - 1;
    let second_prev = n - 2;

    // Expressions are not allowed as arguments
    return fib(prev) + fib(second_prev);
}

fn binary_sqrt(n) {
    let l = 0;
    let r = n;
    while (l <= r) {
        let sum = l + r + 1;
        let mid = sum >> 1;

        // Computer does not support multiplication yet
        let squared = 0;
        for (let i = 0; i < mid; i = i + 1) {
            squared = squared + mid;
        }

        if (squared <= n) {
            l = mid + 1;
        }
        else {
            r = mid - 1;
        }
    }
    return r;
}

fn main() {

    // Test with while loop
    let nth = 0;
    while (nth <= 20) {
        let nth_fib = fib(nth);
        nth = nth - 1;
    }
    
    // Test with for loop
    for (let i = 0; i <= 20; i = i + 1) {
        let nth_fib = fib(i);
    }

    // Calculate sqrt of n with binary search
    let num = 765123;
    let sqrt = binary_sqrt(num);


    // Following errors are om purpose for testing

    let fn = 16;
    for (i >= 12) {
        let ace = 15 >= 12;
    }

    while (ace + 16) {

        return fib(18 - 2);

    }
}